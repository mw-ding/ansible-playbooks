- name: Deply mazzanine
  hosts: vagrant
  vars:
    user: "{{ ansible_ssh_user }}"
    proj_name: mezzanine-example
    venv_home: "{{ ansible_env.HOME }}"
    venv_path: "{{ venv_home }}/{{ proj_name }}"
    proj_dirname: project
    proj_path: "{{ venv_path }}/{{ proj_dirname }}"
    reqs_path: requirements.txt
    manage: "{{ python }} {{ proj_path }}/manage.py"
    live_hostname: 192.168.33.10.xip.io
    domains:
      - 192.168.33.10.xip.io
      - www.192.168.33.10.xip.io
    repo_url: https://github.com/lorin/mezzanine-example.git
    gunicorn_port: 8000
    locale: en_US.UTF-8
    # Variables below don't appear in Mezzanine's fabfile.py # but I've added them for convenience
    conf_path: /etc/nginx/conf
    tls_enabled: True
    python: "{{ venv_path }}/bin/python"
    database_name: "{{ proj_name }}"
    database_user: "{{ proj_name }}"
    database_host: localhost
    database_port: 5432
    gunicorn_proc_name: mezzanine
    vars_files:
      - secrets.yml
    packages:
      - git
      - libjpeg-dev
      - libpq-dev
      - memcached
      - nginx
      - postgresql
      - python-dev
      - python-pip
      - python-psycopg2
      - python-setuptools
      - python-virtualenv
      - supervisor
    pip_packages:
      - gunicorn
      - setproctitle
      - south
      - psycopg2
      - django-compressor
      - python-memcached
  tasks:
    - name: install apt packages
      apt:
        name: "{{ packages }}"
      become: yes
      become_user: root
      become_method: sudo
    
    - name: check out the repository on the host
      git: repo={{ repo_url }} dest={{ proj_path }} accept_hostkey=yes

    - name: install required python packages
      pip:
        name: "{{ pip_packages }}"

    - name: install requirements.txt
      pip:
        requirements: "{{ proj_path }}/{{ reqs_path }}"
        virtualenv: "{{ venv_path }}"
    
    - name: create a user
      postgresql_user:
        name: "{{ database_user }}"
        password: "{{ db_pass }}"
      become: yes
      become_user: root
      become_method: sudo

    - name: create the database
      postgresql_db:
        name: "{{ database_name }}"
        owner: "{{ database_user }}"
        encoding: UTF8
        lc_ctype: "{{ locale }}"
        lc_collate: "{{ locale }}"
        template: template0
      become: yes
      become_user: postgres
      become_method: sudo
